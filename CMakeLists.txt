cmake_minimum_required(VERSION 3.21)
project(substr)

set(CMAKE_CXX_STANDARD 20)

add_executable(substr src/main.cpp)

target_include_directories(substr PRIVATE src)

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_options(substr PRIVATE /W4 /permissive-)
    if(TREAT_WARNINGS_AS_ERRORS)
        target_compile_options(substr PRIVATE /WX)
    endif()
    target_compile_definitions(substr PRIVATE -D_CRT_SECURE_NO_WARNINGS)
else()
    target_compile_options(substr PRIVATE -Wall -pedantic -Wextra)
    target_compile_options(substr PRIVATE -Wno-sign-compare -Wno-self-move)
    target_compile_options(substr PRIVATE -Wold-style-cast)
    target_compile_options(substr PRIVATE -Wextra-semi)
    target_compile_options(substr PRIVATE -Woverloaded-virtual)
    target_compile_options(substr PRIVATE -Wzero-as-null-pointer-constant)
    if(TREAT_WARNINGS_AS_ERRORS)
        target_compile_options(substr PRIVATE -Werror -pedantic-errors)
    endif()
endif()

# Compiler specific warnings
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(substr PRIVATE -Wshadow=compatible-local)
    target_compile_options(substr PRIVATE -Wduplicated-branches)
    target_compile_options(substr PRIVATE -Wduplicated-cond)
    # Disabled due to GCC bug
    # target_compile_options(substr PRIVATE -Wnull-dereference)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(substr PRIVATE -Wshadow-uncaptured-local)
    target_compile_options(substr PRIVATE -Wloop-analysis)
    target_compile_options(substr PRIVATE -Wno-self-assign-overloaded)
endif()

option(USE_SANITIZERS "Enable to build with undefined, address and leak sanitizers" OFF)
if(USE_SANITIZERS)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "Enabling ASAN")
        target_compile_options(substr PUBLIC /fsanitize=address)
        target_link_options(substr PUBLIC /fsanitize=address)
    else()
        message(STATUS "Enabling USAN and ASAN")
        target_compile_options(substr PUBLIC -fsanitize=undefined,address)
        target_link_options(substr PUBLIC -fsanitize=undefined,address)

        target_compile_options(substr PUBLIC -fno-sanitize-recover=all -fno-optimize-sibling-calls -fno-omit-frame-pointer)

        if(NOT CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
            message(STATUS "Enabling LSAN")
            target_compile_options(substr PUBLIC -fsanitize=leak)
            target_link_options(substr PUBLIC -fsanitize=leak)
        endif()
    endif()
endif()

option(USE_THREAD_SANITIZER "Enable to build with thread sanitizer" OFF)
if(USE_THREAD_SANITIZER)
    message(STATUS "Enabling TSAN")
    target_compile_options(substr PUBLIC -fsanitize=thread -fno-sanitize-recover=all)
    target_link_options(substr PUBLIC -fsanitize=thread)
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    message(STATUS "Enabling libc++")
    # These are intentionally set for all targets
    add_compile_options(-stdlib=libc++)
    add_link_options(-stdlib=libc++)
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug")
    message(STATUS "Enabling _GLIBCXX_DEBUG")
    target_compile_options(substr PUBLIC -D_GLIBCXX_DEBUG)
endif()
